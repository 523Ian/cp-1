#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class IDNumberVerification {
public:
  string verify(string s, vector <string> V) {
    string rc = s.substr(0, 6);
    bool sw = true;
    for(int i=0; i<V.size(); i++) {
      if(V[i] == rc) {
	sw = false;
	break;
      }
    }
    if(sw) return "Invalid";

    sw = false;
    int y = atoi(s.substr(6, 4).c_str());
    int m = atoi(s.substr(10, 2).c_str());
    int d = atoi(s.substr(12, 2).c_str());

    if(y < 1900 || y > 2011) sw = true;
    if(m == 0 || d == 0) sw = true;
    if(m > 12) sw = true;
    if((m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && d > 31) sw = true;
    if((m == 4 || m == 6 || m == 9 || m == 11) && d > 30) sw = true;
    if(m == 2) {
      if((y % 100 != 0 && y % 4 == 0) || y % 400 == 0) {
	if(d > 29) sw = true;
      }	else {
	if(d > 28) sw = true;
      }
    }
    if(sw) return "Invalid";

    int TP[18];
    TP[0] = 1;
    for(int i=1; i<=17; i++) TP[i] = (TP[i-1] * 2);

    int x;
    if(s[17] == 'X')
      x = 10;
    else
      x = s[17]-'0';
    for(int i=0; i<17; i++) {
      x += (s[i]-'0') * TP[17-i];
    }
    x %= 11;
    if(x != 1) return "Invalid";

    if(s.substr(14, 3) == "000")
      return "Invalid";

    if((s[16]+'0') % 2 == 0)
      return "Female";
    else
      return "Male";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	IDNumberVerification *obj;
	string answer;
	obj = new IDNumberVerification();
	clock_t startTime = clock();
	answer = obj->verify(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "441323200312060636";
	string t1[] = {"441323"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Male";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "62012319240507058X";
	string t1[] = {"620123"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Female";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "321669197204300886";
	string t1[] = {"610111","659004"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "230231198306900162";
	string t1[] = {"230231"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "341400198407260005";
	string t1[] = {"341400"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "520381193206090891";
	string t1[] = {"532922","520381"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
