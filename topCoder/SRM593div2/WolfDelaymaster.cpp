#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class WolfDelaymaster {
public:
  string check(string s) {
    string t = "";
    vector<string> V;
    for(int i=0; i<s.length(); i++) {
      if(s[i] == 'w') {
	if( i > 1 && s[i-1] != 'w' && t.length() ) {
	  V.push_back(t);
	  t = "w";
	} else {
	  t += s[i];
	}
      } else {
	t += s[i];
      }
    }
    if(t.length()) V.push_back(t);

    vector<string> W;
    for(int i=1; i<=13; i++) {
      t = "";
      for(int j=0; j<i; j++)
	t += 'w';
      for(int j=0; j<i; j++)
	t += 'o';
      for(int j=0; j<i; j++)
	t += 'l';
      for(int j=0; j<i; j++)
	t += 'f';
      W.push_back(t);
    }

    bool sw = true;
    for(int i=0; i<V.size(); i++) {
      cout << " -- " << V[i] << endl;
      int c = 0;
      for(int j=0; j<W.size(); j++) {
	if(V[i] == W[j])
	  c++;
      }

      if(!c) {
	sw = false;
	break;
      }
    }

    if(sw)
      return "VALID";
    else
      return "INVALID";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	WolfDelaymaster *obj;
	string answer;
	obj = new WolfDelaymaster();
	clock_t startTime = clock();
	answer = obj->check(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "wolf";
	p1 = "VALID";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "wwolfolf";
	p1 = "INVALID";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "wolfwwoollffwwwooolllfffwwwwoooollllffff";
	p1 = "VALID";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "flowolf";
	p1 = "INVALID";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
