#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long ll;

class SplitIntoPairs {
public:
  int makepairs(vector <int> V, int x) {
    int p=0, n=0, mp=1000000001, mn=-1000000001;
    for(int i=0; i<V.size(); i++) {
      if(V[i] >= 0) {
	p++;
	mp = min(mp, V[i]);
      } else {
	n++;
	mn = max(mn, V[i]);
      }
    }

    if(p % 2 == 0)
      return V.size()/2;
    if((ll)mp * (ll)mn >= (ll)x)
      return V.size()/2;
    else
      return V.size()/2 - 1;
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	SplitIntoPairs *obj;
	int answer;
	obj = new SplitIntoPairs();
	clock_t startTime = clock();
	answer = obj->makepairs(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {2,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-5,-4,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,-7,8,-2,-5,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -7;
	p2 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {3,4,5,6,6,-6,-4,-10,-1,-9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1000000,1000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -5;
	p2 = 1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {-7726273,-198566,9681506,-6792315,-540917,-4861632,-4982458,-1383709,-6158006,4166470,-6812236,-624690,5158649,-9032251,-8845697,4151603,6274931,-8029271,-5157899,6663477,-1398145,-4257609,145272,-5237570,861762,-4839969,-2853810,577517,-941855,707825,-9448768,-438974,-2454848,9216156,5254895,-923375,440146,3309157,-9364361,8771003};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -2352133;
	p2 = 19;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
