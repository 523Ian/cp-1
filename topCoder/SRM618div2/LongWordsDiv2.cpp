#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LongWordsDiv2 {
public:
  string find(string s) {
      bool sw = true;

    for(int i=1; i<s.length(); i++) {
      if(s[i] == s[i-1]) {
	sw = false;
	break;
      }
    }

    for(int i='A'; i<='Z' && sw; i++) {
      for(int j='A'; j<='Z' && sw; j++) {
	string t = "";
	for(int k=0; k<s.length(); k++) {
	  if(s[k] == i || s[k] == j)
	    t += s[k];
	}

	int c = 0;

	for(int k=0; k<t.length() && sw; k++) {
	  if(c == 0) {
	    if(t[k] == i)
	      c++;
	  } else if(c == 1) {
	    if(t[k] == j)
	      c++;
	  } else if(c == 2) {
	    if(t[k] == i)
	      c++;
	  } else if(c == 3) {
	    if(t[k] == j)
	      sw = false;
	  }
	}

	c = 0;

	for(int k=0; k<t.length() && sw; k++) {
	  if(c == 0) {
	    if(t[k] == j)
	      c++;
	  } else if(c == 1) {
	    if(t[k] == i)
	      c++;
	  } else if(c == 2) {
	    if(t[k] == j)
	      c++;
	  } else if(c == 3) {
	    if(t[k] == i)
	      sw = false;
	  }
	}
      }
    }

    if(sw)
      return "Likes";
    else
      return "Dislikes";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LongWordsDiv2 *obj;
	string answer;
	obj = new LongWordsDiv2();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "AAA";
	p1 = "Dislikes";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ABCBA";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ABCBAC";
	p1 = "Dislikes";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "TOPCODER";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "VAMOSGIMNASIA";
	p1 = "Dislikes";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "SINGLEROUNDMATCH";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "DALELOBO";
	p1 = "Likes";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
