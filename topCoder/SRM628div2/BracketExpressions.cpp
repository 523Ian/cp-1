#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

set<string> B;

class BracketExpressions {

  bool match(string s) {
    cout << "s = " << s << endl;
    if(s.length() == 2) {
      if(B.count(s) == 0) return false;
      else return true;
    }

    for(int i=1; i<s.length(); i+=2) {
      string a = ""; a+=s[0]; a+=s[i];
      cout << "a = " << a << endl;

      if(B.count(a) > 0) {
	if(i == 1) {
	  if(match(s.substr(i+1)))
	    return true;
	} else if(i == s.length()-1) {
	  if(match(s.substr(1, s.length()-2)))
	    return true;
	} else if(match(s.substr(i+1)) && match(s.substr(1, i-1)))
	  return true;
      }
    }
    
    return false;
  }

public:
  string ifPossible(string s) {
    B.insert("");
    B.insert("()");
    B.insert("X)");
    B.insert("(X");
    B.insert("[]");
    B.insert("X]");
    B.insert("[X");
    B.insert("{}");
    B.insert("X}");
    B.insert("{X");
    B.insert("XX");

    if(s.length()%2 == 1) return "impossible";

    if(match(s)) return "possible";
    else return "impossible";
  }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	BracketExpressions *obj;
	string answer;
	obj = new BracketExpressions();
	clock_t startTime = clock();
	answer = obj->ifPossible(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "([]{})";
	p1 = "possible";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "(())[]";
	p1 = "possible";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "({])";
	p1 = "impossible";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "[]X";
	p1 = "impossible";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "([]X()[()]XX}[])X{{}}]";
	p1 = "possible";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
